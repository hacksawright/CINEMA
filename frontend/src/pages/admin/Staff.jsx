import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import {
  getEmployees,
  addEmployee,
  updateEmployee,
  deleteEmployee,
} from "@/services/employee";
import { useForm } from "react-hook-form";
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Badge } from "@/components/ui/badge"; // ‚úÖ import th√™m

// üÜï Component Badge hi·ªÉn th·ªã tr·∫°ng th√°i
function StatusBadge({ status }) {
  let color = "bg-gray-400 text-white";
  if (status === "Ho·∫°t ƒë·ªông") color = "bg-green-500 text-white";
  else if (status === "T·∫°m ngh·ªâ") color = "bg-yellow-300 text-black";
  else if (status === "Ngh·ªâ vi·ªác") color = "bg-red-500 text-white";

  return (
    <Badge className={`px-3 py-1 rounded-full font-semibold ${color}`}>
      {status || "Ch∆∞a c·∫≠p nh·∫≠t"}
    </Badge>
  );
}

export default function Staff() {
  const queryClient = useQueryClient();
  const [editing, setEditing] = useState(null);
  const { register, handleSubmit, reset, setValue } = useForm();

  // L·∫•y danh s√°ch nh√¢n vi√™n
  const { data: employees, isLoading } = useQuery({
    queryKey: ["employees"],
    queryFn: async () => (await getEmployees()).data,
  });

  // CRUD mutations
  const addMutation = useMutation({
    mutationFn: addEmployee,
    onSuccess: () => {
      queryClient.invalidateQueries(["employees"]);
      reset();
    },
  });

  const updateMutation = useMutation({
    mutationFn: ({ id, data }) => updateEmployee(id, data),
    onSuccess: () => {
      queryClient.invalidateQueries(["employees"]);
      setEditing(null);
      reset();
    },
  });

  const delMutation = useMutation({
    mutationFn: deleteEmployee,
    onSuccess: () => queryClient.invalidateQueries(["employees"]),
  });

  const handleEdit = (emp) => {
    setEditing(emp.id);
    setValue("name", emp.name);
    setValue("email", emp.email);
    setValue("phone", emp.phone);
    setValue("role", emp.role);
    setValue("status", emp.status);
  };

  const onSubmit = (data) => {
    if (editing) {
      updateMutation.mutate({ id: editing, data });
    } else {
      addMutation.mutate(data);
    }
  };

  if (isLoading) return <p className="p-4">ƒêang t·∫£i d·ªØ li·ªáu...</p>;

  return (
    <div className="space-y-6">
      <h1 className="text-3xl font-bold">Qu·∫£n l√Ω nh√¢n vi√™n</h1>

      {/* Form th√™m/s·ª≠a nh√¢n vi√™n */}
      <Card>
        <CardHeader>
          <CardTitle>
            {editing ? "C·∫≠p nh·∫≠t nh√¢n vi√™n" : "Th√™m nh√¢n vi√™n m·ªõi"}
          </CardTitle>
        </CardHeader>
        <CardContent>
          <form
            onSubmit={handleSubmit(onSubmit)}
            className="grid grid-cols-2 gap-4"
          >
            <div>
              <Label>T√™n nh√¢n vi√™n</Label>
              <Input
                {...register("name")}
                placeholder="Nguy·ªÖn VƒÉn A"
                required
              />
            </div>
            <div>
              <Label>Email</Label>
              <Input
                {...register("email")}
                type="email"
                placeholder="email@example.com"
                required
              />
            </div>
            <div>
              <Label>S·ªë ƒëi·ªán tho·∫°i</Label>
              <Input {...register("phone")} placeholder="0123 456 789" />
            </div>
            <div>
              <Label>Ch·ª©c v·ª•</Label>
              <Input
                {...register("role")}
                placeholder="Qu·∫£n l√Ω, thu ng√¢n, ..."
              />
            </div>
            {/* üÜï Dropdown Tr·∫°ng th√°i */}
            <div>
              <Label htmlFor="status">Tr·∫°ng th√°i</Label>
              <select
                id="status"
                {...register("status")}
                className="border border-gray-300 rounded px-2 py-1 w-full"
              >
                <option value="Ho·∫°t ƒë·ªông">Ho·∫°t ƒë·ªông</option>
                <option value="T·∫°m ngh·ªâ">T·∫°m ngh·ªâ</option>
                <option value="Ngh·ªâ vi·ªác">Ngh·ªâ vi·ªác</option>
              </select>
            </div>

            <div className="col-span-2 flex gap-2 mt-2">
              <Button type="submit">{editing ? "C·∫≠p nh·∫≠t" : "Th√™m m·ªõi"}</Button>
              {editing && (
                <Button
                  variant="outline"
                  type="button"
                  onClick={() => {
                    reset();
                    setEditing(null);
                  }}
                >
                  H·ªßy
                </Button>
              )}
            </div>
          </form>
        </CardContent>
      </Card>

      {/* Danh s√°ch nh√¢n vi√™n */}
      <Card>
        <CardHeader>
          <CardTitle>Danh s√°ch nh√¢n vi√™n</CardTitle>
        </CardHeader>
        <CardContent>
          <table className="w-full text-sm border-collapse">
            <thead className="bg-muted">
              <tr>
                <th className="border p-2">T√™n</th>
                <th className="border p-2">Email</th>
                <th className="border p-2">S·ªë ƒëi·ªán tho·∫°i</th>
                <th className="border p-2">Ch·ª©c v·ª•</th>
                <th className="border p-2 text-center">Tr·∫°ng th√°i</th>
                <th className="border p-2 text-center">Thao t√°c</th>
              </tr>
            </thead>
            <tbody>
              {employees?.map((e) => (
                <tr key={e.id}>
                  <td className="border p-2">{e.name}</td>
                  <td className="border p-2">{e.email}</td>
                  <td className="border p-2">{e.phone}</td>
                  <td className="border p-2">{e.role}</td>
                  <td className="border p-2 text-center">
                    <StatusBadge status={e.status} />
                  </td>
                  <td className="border p-2 text-center space-x-2">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => handleEdit(e)}
                    >
                      S·ª≠a
                    </Button>
                    <Button
                      variant="destructive"
                      size="sm"
                      onClick={() => delMutation.mutate(e.id)}
                    >
                      X√≥a
                    </Button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </CardContent>
      </Card>
    </div>
  );
}